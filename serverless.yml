service: example-project

useDotenv: true

provider:
  name: aws
  environment:
    AWS_ACCESS_KEY_ID=${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY=${env:AWS_SECRET_ACCESS_KEY}
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: !GetAtt usersTable.Arn
  
plugins:
  - serverless-dynamodb
  - serverless-offline

package:
  individually: true
  patterns:
    - "!.dynamodb"
    - "!node_modules"

custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

functions:
  get-users:
    handler: getUsers/handler.getUsers
    events:
      - http:
          path: users/{id}
          method: GET
  create-users:
    handler: createUsers/handler.createUsers
    events:
      - http:
          path: users
          method: POST
  update-users:
    handler: updateUsers/handler.updateUsers
    events:
      - http:
          path: users/{id}
          method: PATCH
  delete-users:
    handler: deleteUsers/handler.deleteUsers
    runtime: python3.8
    package:
      patterns:
        - "deleteUsers/handler.py"
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
	
resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
